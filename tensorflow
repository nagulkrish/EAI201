import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt

X_train = np.linspace(-5, 5, 60)  # wider range, more points
y_train = 4 * X_train - 1 + np.random.randn(*X_train.shape) * 3  # more noise

model = tf.keras.Sequential([
    tf.keras.layers.Dense(1, input_dim=1)
])

model.compile(optimizer='adam', loss='mse')

model.fit(X_train, y_train, epochs=150, verbose=0)

weights = model.layers[0].get_weights()
m_learned = weights[0][0][0]   # slope
c_learned = weights[1][0]      # intercept

print(f"Learned equation: y = {m_learned:.2f}x + {c_learned:.2f}")

plt.figure(figsize=(8,5))
plt.scatter(X_train, y_train, color="blue", alpha=0.6, label="Training Data")
plt.plot(X_train, model.predict(X_train), color="green", linewidth=2, label="Fitted Line")
plt.xlabel("X values")
plt.ylabel("y values")
plt.title("Linear Regression using TensorFlow")
plt.legend()
plt.grid(True)
plt.show()
